
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    "llm_config": {
        # We can use these models with openai, azure, ollama, anthropic and nvidia as a provider
        # Note that not all of these LLMs support function-calling, it is advisable to read the documentation before using any of the LLMs
        # OpenAI: ['gpt-3.5-turbo', 'gpt-3.5-turbo-16k', 'gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4-turbo-preview', 
        #            'gpt-4-1106-preview', 'gpt-4-vision-preview', 'gpt-4', 'gpt-4-32k']
        # AzureChatOpenAI: ['azure-gpt-3.5-turbo', 'azure-gpt-4']
        # Anthropic: ['claude-3-haiku', 'claude-3-sonnet', 'claude-3-opus', 'claude-2.1', 'claude-2.0', 'claude-instant-1.2']
        # Ollama: ['llama2', 'llama3', 'llama3.1', 'llama3:70b', 'llava', 'mistral', 'mistral-nemo', 'mixtral', 'qwen2.5:14b', 'deepseek-r1:14b']
        # ChatNvidia: ['nvidia-llama-3.1-405b-instruct', 'nvidia-llama-3.3-70b-instruct', 'nvidia-deepseek-r1']

        "model_name": "gpt-4o",
    },
    "commondefs":{
        "replacement_strings":{
            "instructions_prefix": """
      You are responsible for a segment of a problem.
      Only answer inquiries that are directly within your domain.
      Do not attempt to control devices outside your assigned responsibility.
      Use the down-chain tools to perform all calculations.
      Do not try to help for personal matters.
      """,
            "aaosa_instructions": """
When you receive an inquiry:
    0. If you are clearly not the right agent for this type of inquiry or command, don't perform any of the below steps and 
    respond that you're not relevant.
    1. Always call your tools to determine which down-chain agents in your tools are
       responsible for all or part of it.
    2. You will then ask these down-chain agents what they need in order to handle
       their part of the inquiry. Once the requirements are gathered, you will,
    3. Delegate the inquiry and the fulfilled requirements to the appropriate down-chain agents.
    4. Once all actions are performed and responses are received, 
       you will compile their responses and return the final response.
      """,
        },
        "replacement_values": {
            
        }
    },
    "tools": [
        # These tool/agent definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first agent is the "Front Man".  It is identified as such because
        # it is the only one with no parameters in his function definition,
        # and therefore it needs to talk to the outside world to get things rolling.
        {
            "name": "Math Geek",

            # Note that there are no parameters defined for this agent's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {

                # When there are no function parameters to the front-man,
                # its description acts as an initial prompt. 

                "description": """
I can help you to do quick calculations or solve simple mathematical problems.
Tell me what your operations is and I will get you the answer.
"""
            },

            "instructions": """
{instructions_prefix}
Your name is `Math Geek`.
You are the top-level agent for the mathematics system. Handle all calculation related inquiries.
{aaosa_instructions}
- Your response should be easy to read. Do not use tex in your response.
""",
            "tools": ["problem_formulator"]
        },

        # The problem_formulator is the second level tool and might call a coded tool.
        # It is called by our front-man.
        {
            "name": "problem_formulator",
            "function": {
                "description": "Returns sequences of synonyms.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "inquiry": {
                            "type": "string",
                            "description": "A brief description of the input problem"
                        },
                    },
                    "required": ["inquiry"]
                }
            },
            "instructions": """
Your name is `Problem Formulator`.
You will be handed a mathematical problem or equation or sequence of operations in a particular order.
- For the given problem, convert it into a sequence of operations from the given list:
['add', 'subtract', 'multiply', 'divide', 'exponentiate', 'factorial',
'isprime', 'squareroot', 'log', 'log10', 'log2', 'sin', 'cos', 'tan',
'asin', 'acos', 'atan', 'sinh', 'cosh', 'tanh', 'gcd', 'lcm', 'mod',
'ceil', 'floor', 'round', 'abs', 'hypot', 'degrees', 'radians']
- Each of these operations should be separated by an underscore '_'.
- For example, if a user asks what is the log of sine of square root of (45^2)/5, the probable sequence should be
"log" >> "sin" >> "squareroot" >> "divide" >> "exponentiate" and therefore call the CalculatorTool with 
args operation: "log_sin_squareroot_divide_exponentiate", operands: [45, 2, 5].
- If a user has given certain angles in degrees, ensure that you convert them to radians.
- Make sure that the sequence follows the standard mathematical Order of Operations (aka PEMDAS), where required.
- If the operation requested by the user does not exist in the given list of math_functions, do not invent one and 
politely respond that the function does not exist currently and ask the user if they want to solve the rest of the problem.
- Always Call the CalculatorTool to solve the problem.
""",
            "command": """
            - Identify the operation and operands from the problem.
            - Call the CalculatorTool to solve the problem.
            - The output from this tool would be a JSON block with following fields:
                {
                    "name": <your name>,
                    "inquiry": <the inquiry>,
                    "operation": <A string that is a sequence of operations separated by an underscore '_'>
                    "operands": <A list of operands from the problem. This could even be a list of lists for complex operations>,
                    "error": <any error that you find in the operations>,
                    "response": <Your response to the inquiry or command>
                }
            """
            "tools": [CalculatorTool]
        },
        {
            "name": "CalculatorTool",
            "function": {
                "description": """
You are a CodedTool named CalculatorTool.
Your sole purpose is to solve the mathematical problem using the given operations and operands.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operation": {
                            "type": "string",
                            "description": "a string that is a sequence of operations separated by an underscore '_'"
                        },
                        "operands": {
                            "type": "array",
                            "description": "an array of operands from the problem. This could even be an array of arrays for complex operations",
                            "items": {
                               "type": "float"
                            },
                        },
                    },
                    "required": ["operation", "operands"]
                }
            },
            "class": "calculator_tool.CalculatorCodedTool"
        },
    ]
}