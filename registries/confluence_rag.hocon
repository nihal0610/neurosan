
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# To use this agent network, start by installing the required package:
#     pip install atlassian-python-api
#
# Additional installations may be required depending on the attachment types used.
# For details, see the "Attachments" section below.

{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "Confluence RAG Assistant",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {
                "description": "Answer caller's query with answers from tools.",
            },

            "instructions": """Always use your tool to respond to the inquiry.
            If the tool failed or unavailable, just notify the user.
            Do not attempt to answer the question by yourself.""",
            "tools": ["rag_retriever"]
        },
        # RAG tool that loads data from confluence URL into an in-memory vectorstore and answers queries.
        {
            "name": "rag_retriever",
            "toolbox": "confluence_rag",
            "args": {
                # User-defined arguments for the tool

                # --- Required Argument ---

                # Authentication
                #
                # "username": "<your-confluence-username>", or environment variable "JIRA_USERNAME"
                # "api_key": "<your-api-token>", or environment variable "JIRA_API_TOKEN" 
                
                # Confluence URL to use for Retrieval-Augmented Generation (RAG)
                "url": "https://yoursite.atlassian.net/wiki/",
                
                # Page Selection
                # 
                # You can specify which pages to load using:
                #
                # page_ids (list):
                # A list of page_id values to load the corresponding pages.
                "page_ids": ["2317090828"],
                # or
                # space_key (string):
                # A string of space_key value to load all pages within the specified confluence space.
                # "space_key": "DAI",
                #
                # If both page_ids and space_key are provided, the loader will return the union of pages from both lists.
                #
                # Both space_key and page_id can be found in the URL of a Confluence page:
                # https://yoursite.atlassian.net/wiki/spaces/{space_key}/pages/{page_id}


                # --- Optional Arguments ---
                #
                # Attachments
                #
                "include_attachments": false
                # If True, download and extract text content to add to the document.
                # (the default value is false)
                #
                # Currently supported attachment types:
                # PDF (.pdf)
                # PNG (.png)
                # JPEG/JPG (.jpeg, .jpg)
                # SVG (.svg)
                # Word (.doc, .docx)
                # Excel (.xls, .xlsx)
                #
                # Note: Some file types require additional Python packages (e.g., pytesseract, pdf2image, Pillow)
                # and external system dependencies (e.g., Poppler for PDFs, Tesseract for OCR).
                #
                # For full details on supported arguments and required dependencies for loading Confluence pages,
                # refer to the official LangChain documentation:
                # https://python.langchain.com/api_reference/_modules/langchain_community/document_loaders/confluence.html#ConfluenceLoader

                # Vector Store
                #
                # Set to true to save the generated vector store as a JSON file
                "save_vector_store": true,

                # Directory to save and load the vector store (use absolute path or path relative to "neuro-san-studio/coded_tools/")
                # Must be ".json"
                "vector_store_path": "confluence_vector_store.json"
            }
        },
    ]
}
